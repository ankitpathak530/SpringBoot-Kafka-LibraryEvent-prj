package com.learn_kafa.producer;

import java.util.concurrent.ExecutionException;

import org.apache.kafka.clients.producer.ProducerRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.stereotype.Component;
import org.springframework.util.concurrent.ListenableFuture;
import org.springframework.util.concurrent.ListenableFutureCallback;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.learn_kafa.domain.LibraryEvent;

import lombok.extern.slf4j.Slf4j;

@Component
@Slf4j
public class LibraryEventProducer {

	@Autowired
	KafkaTemplate<Integer, String> kafkaTemplate;

	@Autowired
	ObjectMapper ojMapper;
	
	private static String topic = "library-events";
	
	/* It's Asynchronous behavior approach 1
	* 
	* kafkaTemplate sendDefault tight to the configuration value 
	* we have written in aplication.properties file.
	*
	*/
	public void sendLibraryEvent(LibraryEvent libraryEvent) throws JsonProcessingException {
		
		Integer key = libraryEvent.getLibraryEventId();
		String value = ojMapper.writeValueAsString(libraryEvent);
					
		ListenableFuture<SendResult<Integer, String>> listenableFuture = this.kafkaTemplate.sendDefault(key,value);
        listenableFuture.addCallback( new ListenableFutureCallback<SendResult<Integer,String>>(){

			@Override
			public void onSuccess(SendResult<Integer, String> result) {
				handleSuccess(key, value, result);
			}
			@Override
			public void onFailure(Throwable ex) {
				handleFailure(key,value,ex);
			}		
	    });
	
	}
	
	
	  /*It's Asynchronous behavior
	   *Advantage of this approach is that this kafkaTemplate send method publish n no. of topics with same 
	   *instance of kafka template.
	   *
	   */
		public void sendLibraryEventApproach2(LibraryEvent libraryEvent) throws JsonProcessingException {
			
			Integer key = libraryEvent.getLibraryEventId();
			String value = ojMapper.writeValueAsString(libraryEvent);
						
			ListenableFuture<SendResult<Integer, String>> listenableFuture = this.kafkaTemplate.send(topic,key,value);
	        listenableFuture.addCallback( new ListenableFutureCallback<SendResult<Integer,String>>(){

				@Override
				public void onSuccess(SendResult<Integer, String> result) {
					handleSuccess(key, value, result);
				}
				@Override
				public void onFailure(Throwable ex) {
					handleFailure(key,value,ex);
				}		
		    });
		
		}
	
		public void sendLibraryEventApproach3(LibraryEvent libraryEvent) throws JsonProcessingException {

			Integer key = libraryEvent.getLibraryEventId();
			String value = ojMapper.writeValueAsString(libraryEvent);

			ProducerRecord<Integer, String> producerRecord = buildProducerRecord(topic, key, value);
			this.kafkaTemplate.send(producerRecord);
		}
		
		private  ProducerRecord<Integer, String> buildProducerRecord(String topic, Integer key, String value) {
			                          //topic,partition,key,value,header
			return new ProducerRecord<>(topic,null,key,value,null);
			
		}
		
		
	//It's Synchronous behavior
	public SendResult<Integer, String> sendLibraryEventsSynchronously(LibraryEvent libraryEvent) throws JsonProcessingException
	{
		Integer key = libraryEvent.getLibraryEventId();
		String value = ojMapper.writeValueAsString(libraryEvent);
					
		SendResult<Integer, String> sendResult = null;
		try {
			sendResult = this.kafkaTemplate.sendDefault(key,value).get();
		}catch(ExecutionException | InterruptedException e) {
			log.error("ExecutionException/InterruptedException Sending the Message and the exception is {}",e.getMessage());
		}
		
		return sendResult;
	}
	
	
	
	
	
	
	protected void handleFailure(Integer key, String value, Throwable ex) {
		log.error("Error Sending the message and the exception is {}",ex.getMessage());
		try {
			throw ex;
		}catch(Throwable throwable) {
			log.error("Error in on failure: {}",throwable.getMessage());
		}
	}

	private void handleSuccess(Integer key, String value, SendResult<Integer, String> result) {
		log.info("Message Sent Successfully for the key : {} and the Value is {}, partiton is {} ",key,value,result.getRecordMetadata().partition());
	}
}
